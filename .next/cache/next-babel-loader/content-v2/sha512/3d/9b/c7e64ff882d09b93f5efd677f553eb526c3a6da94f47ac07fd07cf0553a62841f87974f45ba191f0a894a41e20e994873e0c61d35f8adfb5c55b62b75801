{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/paru/Documents/test-projects/next-js/next-js-meetup/pages/[meetupId]/index.js\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\nimport Head from \"next/head\";\nimport { MongoClient, ObjectId } from \"mongodb\";\n\nconst meetUpDetails = props => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"React New Meetup\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"description\",\n        content: \"Ad your own meetup places\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MeetupDetail, {\n      title: props.meetupData.title,\n      image: props.meetupData.image,\n      address: props.meetupData.address,\n      description: props.meetupData.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect(\"mongodb+srv://parvathyvd:ganapathy@cluster0.rco3m.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport const getStaticProps = async context => {\n  const meetupId = context.params.meetupId;\n  const client = await MongoClient.connect(\"mongodb+srv://parvathyvd:ganapathy@cluster0.rco3m.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const selectedMeetups = await meetupsCollection.findOne({\n    _id: ObjectId(meetupId)\n  });\n  client.close(); //fetch data for single\n\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetups._id.toString(),\n        title: selectedMeetups.title,\n        image: selectedMeetups.image,\n        description: selectedMeetups.description\n      }\n    }\n  };\n};\nexport default meetUpDetails;","map":{"version":3,"sources":["/Users/paru/Documents/test-projects/next-js/next-js-meetup/pages/[meetupId]/index.js"],"names":["MeetupDetail","Head","MongoClient","ObjectId","meetUpDetails","props","meetupData","title","image","address","description","getStaticPaths","client","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","selectedMeetups","findOne","id"],"mappings":";;;AAAA,OAAOA,YAAP,MAAyB,uCAAzB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,SAAtC;;AAEA,MAAMC,aAAa,GAAIC,KAAD,IAAW;AAC/B,sBACE;AAAA,4BACE,QAAC,IAAD;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAM,QAAA,IAAI,EAAC,aAAX;AAAyB,QAAA,OAAO,EAAC;AAAjC;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAKE,QAAC,YAAD;AACE,MAAA,KAAK,EAAEA,KAAK,CAACC,UAAN,CAAiBC,KAD1B;AAEE,MAAA,KAAK,EAAEF,KAAK,CAACC,UAAN,CAAiBE,KAF1B;AAGE,MAAA,OAAO,EAAEH,KAAK,CAACC,UAAN,CAAiBG,OAH5B;AAIE,MAAA,WAAW,EAAEJ,KAAK,CAACC,UAAN,CAAiBI;AAJhC;AAAA;AAAA;AAAA;AAAA,YALF;AAAA,kBADF;AAcD,CAfD;;AAiBA,OAAO,eAAeC,cAAf,GAAgC;AACrC,QAAMC,MAAM,GAAG,MAAMV,WAAW,CAACW,OAAZ,CACnB,mGADmB,CAArB;AAIA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AACA,QAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAA3B,EAAuCC,OAAvC,EAAtB;AACAR,EAAAA,MAAM,CAACS,KAAP;AACA,SAAO;AACLC,IAAAA,QAAQ,EAAE,KADL;AAELC,IAAAA,KAAK,EAAEN,OAAO,CAACO,GAAR,CAAaC,MAAD,KAAa;AAC9BC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,QAAQ,EAAEF,MAAM,CAACN,GAAP,CAAWS,QAAX;AAAZ;AADsB,KAAb,CAAZ;AAFF,GAAP;AAMD;AAED,OAAO,MAAMC,cAAc,GAAG,MAAOC,OAAP,IAAmB;AAC/C,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC;AACA,QAAMf,MAAM,GAAG,MAAMV,WAAW,CAACW,OAAZ,CACnB,mGADmB,CAArB;AAIA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AACA,QAAMe,eAAe,GAAG,MAAMhB,iBAAiB,CAACiB,OAAlB,CAA0B;AACtDb,IAAAA,GAAG,EAAEhB,QAAQ,CAACwB,QAAD;AADyC,GAA1B,CAA9B;AAIAf,EAAAA,MAAM,CAACS,KAAP,GAZ+C,CAc/C;;AACA,SAAO;AACLhB,IAAAA,KAAK,EAAE;AACLC,MAAAA,UAAU,EAAE;AACV2B,QAAAA,EAAE,EAAEF,eAAe,CAACZ,GAAhB,CAAoBS,QAApB,EADM;AAEVrB,QAAAA,KAAK,EAAEwB,eAAe,CAACxB,KAFb;AAGVC,QAAAA,KAAK,EAAEuB,eAAe,CAACvB,KAHb;AAIVE,QAAAA,WAAW,EAAEqB,eAAe,CAACrB;AAJnB;AADP;AADF,GAAP;AAUD,CAzBM;AA2BP,eAAeN,aAAf","sourcesContent":["import MeetupDetail from \"../../components/meetups/MeetupDetail\";\nimport Head from \"next/head\";\nimport { MongoClient, ObjectId } from \"mongodb\";\n\nconst meetUpDetails = (props) => {\n  return (\n    <>\n      <Head>\n        <title>React New Meetup</title>\n        <meta name=\"description\" content=\"Ad your own meetup places\" />\n      </Head>\n      <MeetupDetail\n        title={props.meetupData.title}\n        image={props.meetupData.image}\n        address={props.meetupData.address}\n        description={props.meetupData.description}\n      />\n    </>\n  );\n};\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect(\n    \"mongodb+srv://parvathyvd:ganapathy@cluster0.rco3m.mongodb.net/meetups?retryWrites=true&w=majority\"\n  );\n\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray();\n  client.close();\n  return {\n    fallback: false,\n    paths: meetups.map((meetup) => ({\n      params: { meetupId: meetup._id.toString() },\n    })),\n  };\n}\n\nexport const getStaticProps = async (context) => {\n  const meetupId = context.params.meetupId;\n  const client = await MongoClient.connect(\n    \"mongodb+srv://parvathyvd:ganapathy@cluster0.rco3m.mongodb.net/meetups?retryWrites=true&w=majority\"\n  );\n\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const selectedMeetups = await meetupsCollection.findOne({\n    _id: ObjectId(meetupId),\n  });\n\n  client.close();\n\n  //fetch data for single\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetups._id.toString(),\n        title: selectedMeetups.title,\n        image: selectedMeetups.image,\n        description: selectedMeetups.description,\n      },\n    },\n  };\n};\n\nexport default meetUpDetails;\n"]},"metadata":{},"sourceType":"module"}